#!/bin/bash
version='0.2.0' # -- [main OFF/major ON/minor ON]
OPENCV_VERSION='4.5.0'

laxzhelp() {
    echo -e "\e[0;33m"
cat<<EOF
    --help          to show this usage message.
    --map           to show sitemap of this image.
    --build NUMBER  this will build opencv 4.5.0 from source.
    --cvhelp        docker and opencv help for sharing x server.
    --version       dklaxz's version.
    --update        update dklaxz.
    --update-rc     update laxz.bashrc.
EOF
    echo -e "\e[m"
}

laxzmap() {
    echo -e "\e[1;31m"
cat<<EOF
 ----------------------------------------------------------------------
|
|from nvidia/cuda:11.0-cudnn8-devel-ubuntu18.04
|           |
|           |
|        minlaxz/cudan-tf-notebook
|             |  |     |    |
|             |  |     |    |____ export jupyter-notebook @ 8888  <<< |
|             |  |     |                                              |
|             |  |     |____ tensorrt, build tf-gpu                   |
|             |  |               |                                    |
|             |  |               |____ pycuda                         |
|             |  |                                                    |
|             |  |____ ready cuda, cudnn from nvidia                  |
|    __ lxz __|                                                       |
|   |         |                                                       |
|   |         |____ python3, python3-dev, python3-pip, numpy          |
|   |                                                                 |
|   |__build__ opencv build 4.5.0,                                    |
|   |__ help__ helpful usage message.                                 |
|                                                                     |
|    https://gist.github.com/minlaxz/1a99b4277aee3b82a152f036322d7db8 |
|
 --------------cuda11.0:cudnn8.0.5.39:tensorrt7.2.1.6:ubuntu18.04 -----
EOF
    echo -e "\e[m"
}

laxzbuild() {
    compute_cab=$1
    echo -e "\e[1;37m"
echo "installing required dependencies ... ${compute_cab} "
    echo -e "\e[m"
apt install -y cmake unzip pkg-config libjpeg-dev libpng-dev libtiff-dev libavcodec-dev \
libavformat-dev libswscale-dev libv4l-dev libxvidcore-dev libx264-dev \
libgtk-3-dev libatlas-base-dev gfortran
    echo -e "\e[1;37m"
echo "Finished. "
    echo -e "\e[m"

    echo -e "\e[1;37m"
echo "Downloading OpenCV archive ... "
    echo -e "\e[m"
wget -O opencv.zip https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip \
&& unzip opencv.zip && mv opencv-4.5.0/ opencv/
    echo -e "\e[1;37m"
echo "OpenCV Ready. "
    echo -e "\e[m"

    echo -e "\e[1;37m"
echo "Downloading OpenCV_contrib archive ... "
    echo -e "\e[m"
wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip \
&& unzip opencv_contrib.zip && mv opencv_contrib-4.5.0/ opencv_contrib/
    echo -e "\e[1;37m"
echo "Opencv_contrib Ready. "
    echo -e "\e[m"

    echo -e "\e[7;34m"
echo "OpenCV build started. This will take several minutes."
    echo -e "\e[m"
cd opencv && mkdir -p build && cd $_ \
cmake -D CMAKE_BUILD_TYPE=RELEASE \
-D CMAKE_INSTALL_PREFIX=/usr/local \
-D WITH_CUDA=ON \
-D WITH_CUDNN=ON \
-D OPENCV_DNN_CUDA=ON \
-D ENABLE_FAST_MATH=1 \
-D CUDA_FAST_MATH=1 \
-D WITH_CUBLAS=1 \
-D CUDA_ARCH_BIN=${compute_cab} \
-D INSTALL_PYTHON_EXAMPLES=ON \
-D INSTALL_C_EXAMPLES=OFF \
-D OPENCV_ENABLE_NONFREE=ON \
-D HAVE_opencv_python3=ON \
-D PYTHON_EXECUTABLE=$(which python) \
-D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
-D BUILD_EXAMPLES=ON .. && make -j4

    echo -e "\e[7;34m"
echo "Installation started. This will take several minutes."
    echo -e "\e[m"
    make install && ldconfig
    echo -e "\e[7;34m"
echo "Installation finished."
    echo -e "\e[m"
    
    echo -e "\e[7;34m"
echo "Cleaning"
    echo -e "\e[m"
    cd ../../ && rm -rf opencv opencv_contrib && rm opencv.zip opencv_contrib.zip \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf ~/.cache/pip
    echo -e "\e[7;34m"
echo "Finished."
    echo -e "\e[m"
}

laxzopencv() {
    echo -e "\e[1;37m"
cat<<EOF
    Docker and OpenCV Usage.
    ------------------------
    docker run --rm --interactive --tty --gpus all --device /dev/video0:/dev/video0 \
    --volume $HOME:$HOME --publish 8888:8888 IMAGE /bin/bash #FOR INTERACTIVE ADN REMOVE ON EXIT


    docker run --name NAME --detach --tty --gpus all --device /dev/video0:/dev/video0 \
    --volume $HOME:$HOME --publish 8888:8888 IMAGE
    docker exec --interactive --tty NAME /bin/bash

    docker run --detach --tty --gpus all --device /dev/video0:/dev/video0 \
    --volume $HOME:$HOME --publish 8888:8888 IMAGE
EOF
    echo -e "\e[m"
}

dklaxzupdate() {
    curl -fsSL https://raw.githubusercontent.com/minlaxz/scripts/master/dklaxz>/usr/bin/dklaxz
    echo "dklaxz updated."
}

rcupdate(){
    curl -fsSL https://raw.githubusercontent.com/minlaxz/scripts/master/laxz.bashrc>/etc/bash.bashrc
    chmod a+rwx /etc/bash.bashrc
    echo "bash.bashrc updated."
}

if [ $# -eq 0 ]; then
echo -e "\e[1;31m"
    printf "[not an option] dklaxz --help    for usage.\n"
echo -e "\e[m"
else
    stVar=$1 #major
    ndVar=$2 #minor

    case "$stVar" in
        --help) laxzhelp ;;
        --map) laxzmap ;;
        --build) if [[ $ndVar == "" ]]; then
            echo "This need GPU(s)'(!s) compute capability number. eg:7.6"
            echo "more info > https://developer.nvidia.com/cuda-gpus"
            else laxzbuild $ndVar
            fi
            ;;
        --cvhelp) laxzopencv ;;
        --version) printf "version : ${version} Main:Major:Minor\n" ;;
        --update) dklaxzupdate ;;
        --update-rc) rcupdate ;;
        *) printf "[not an option $stVar] dklaxz --help    for usage.\n" ;;
    esac
fi